"""
Django settings for barangay project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

from django.contrib import messages
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-kq&qx+s1zqz^+ut+i-je0=^!j7&+0@78(szxmfdp!7^#+c$_#&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)
    mimetypes.add_type("text/css", ".css", True)

# NOTE: No need to put allowed host while in development.
# This is only needed when deploying the project.
ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "authentication",
    "profiling",
    "blotter",
    "users",
    "persistence",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware', #added 
    'authentication.middleware.LoginRequiredMiddleware',
    # 'authentication.middleware.SessionExpiryMiddleware',  # please remove if not used
    # 'authentication.middleware.SessionTimeoutMiddleware', # please remove if not used
]

ROOT_URLCONF = "barangay.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ 
            BASE_DIR / "templates",
            BASE_DIR / "blotter/templates/blotter", 
            BASE_DIR / "profiling/templates/profiling",
            BASE_DIR / "users/templates/users",
            BASE_DIR / "authentication/templates/authentication"],
                
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "barangay.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_ENVIRON = 'local'

if DATABASE_ENVIRON == 'online':
    path_to_dotenv = os.path.join(BASE_DIR, "configuration", ".env")
else:
    path_to_dotenv = os.path.join(BASE_DIR, "configuration", ".env.local")

load_dotenv(path_to_dotenv)
# NOTE: Uncomment the code below to use PostgreSQL database
# NOTE: Make sure to install psycopg2-binary or the same library for PostgreSQL
# NOTE: Make sure to create a PostgreSQL database and user
# NOTE: Make sure to update the database settings below
if os.getenv('DB_ENGINE') and os.getenv('DB_ENGINE') :
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_SECRET_KEY'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }
elif os.path.join(BASE_DIR, 'db.sqlite3'):
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  
        'NAME': '3feb14',  # Replace with your PostgreSQL database name
        'USER': 'postgres',       # Your PostgreSQL username
        'PASSWORD': 'hannahmae6154',   # Your PostgreSQL password
        'HOST': 'localhost',           # Use 'localhost' if running locally, or the server's IP
        'PORT': '5432',                # Default PostgreSQL port
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = 'Asia/Manila'
USE_TZ = False  # This ensures Django uses time zones
USE_I18N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# NOTE: This URL is as is.
# Do not change since this configuration is true to the entire Django project.
STATIC_URL = "/static/"

# NOTE: Add the path of the static files directory
# Example: os.path.join(BASE_DIR, "static")
# For path that are deeply nested with folders, use the following format:
# os.path.join(BASE_DIR, "folder1", "folder2", "folder3", "static")
# or much safer to do this:
# os.path.join(BASE_DIR, "folder1/folder2/folder3/static")
# Try both, one should work.
STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
        os.path.join(BASE_DIR, 'blotter/static/blotter'),
        os.path.join(BASE_DIR, 'profiling/static/profiling'),
        os.path.join(BASE_DIR, 'users/static/users'),
        os.path.join(BASE_DIR, 'authentication/static/authentication')
    ]

# NOTE: Run "python manage.py collectstatic" to collect static files
# This will create a folder named "staticfiles" in the root directory
# NOTE: PLEASE DO NOT RUN THIS COMMAND IF IT IS NOT READY TO DEPLY,
# THIS IS IGNORED IN THE VERSION CONTROL TO AVOID UNECCESSARY BULK FILES
# IN THE REMOTE REPOSITORY.
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redirect users to the login page if they are not logged in
# LOGIN_URL = os.path.join(BASE_DIR, 'profiling/static/profiling/login')# Replace this with your actual login URL
# LOGIN_URL = os.path.join(BASE_DIR, 'authentication/templates/authentication/authentication_index')# Replace this with your actual login URL

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Default backend
SESSION_COOKIE_AGE = 3600 # 1 hour in seconds
# SESSION_COOKIE_AGE = 3600  # 1 hour session (3600 seconds)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Session persists even after browser closes
SESSION_SAVE_EVERY_REQUEST = False  # Do not reset the expiry on every request

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# settings.py
LOGIN_URL = '/authentication/login/'  # Update this to the correct app and view name

MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}